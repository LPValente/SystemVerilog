$version Generated by VerilatedVcd $end
$timescale 1ns $end
 $scope module $rootio $end
 $upscope $end
 $scope module conta_votos_tb $end
  $var wire 3 # V [2:0] $end
  $var wire 4 * R [3:0] $end
  $scope module cv1 $end
   $var wire 3 # V [2:0] $end
   $var wire 4 * R [3:0] $end
   $var wire 9 + T [8:0] $end
   $var wire 3 7 I [2:0] $end
   $scope module and1 $end
    $var wire 1 $ A $end
    $var wire 1 % B $end
    $var wire 1 , C $end
   $upscope $end
   $scope module and2 $end
    $var wire 1 , A $end
    $var wire 1 & B $end
    $var wire 1 8 C $end
   $upscope $end
   $scope module and3 $end
    $var wire 1 ' A $end
    $var wire 1 % B $end
    $var wire 1 - C $end
   $upscope $end
   $scope module and4 $end
    $var wire 1 - A $end
    $var wire 1 & B $end
    $var wire 1 . C $end
   $upscope $end
   $scope module and5 $end
    $var wire 1 $ A $end
    $var wire 1 / B $end
    $var wire 1 0 C $end
   $upscope $end
   $scope module and6 $end
    $var wire 1 $ A $end
    $var wire 1 ( B $end
    $var wire 1 1 C $end
   $upscope $end
   $scope module and7 $end
    $var wire 1 1 A $end
    $var wire 1 ) B $end
    $var wire 1 2 C $end
   $upscope $end
   $scope module and8 $end
    $var wire 1 ' A $end
    $var wire 1 / B $end
    $var wire 1 3 C $end
   $upscope $end
   $scope module inv1 $end
    $var wire 1 $ a $end
    $var wire 1 ' b $end
   $upscope $end
   $scope module inv2 $end
    $var wire 1 % a $end
    $var wire 1 ( b $end
   $upscope $end
   $scope module inv3 $end
    $var wire 1 & a $end
    $var wire 1 ) b $end
   $upscope $end
   $scope module nor2 $end
    $var wire 1 4 a $end
    $var wire 1 & b $end
    $var wire 1 9 c $end
   $upscope $end
   $scope module or1 $end
    $var wire 1 . a $end
    $var wire 1 0 b $end
    $var wire 1 5 c $end
   $upscope $end
   $scope module or2 $end
    $var wire 1 2 a $end
    $var wire 1 3 b $end
    $var wire 1 6 c $end
   $upscope $end
   $scope module or3 $end
    $var wire 1 $ a $end
    $var wire 1 % b $end
    $var wire 1 4 c $end
   $upscope $end
   $scope module xor1 $end
    $var wire 1 % a $end
    $var wire 1 & b $end
    $var wire 1 / c $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b000 #
0$
0%
0&
1'
1(
1)
b0001 *
b000000000 +
0,
0-
0.
0/
00
01
02
03
04
05
06
b111 7
08
19
#5
b001 #
1&
0)
b0010 *
b010001000 +
1/
13
16
b110 7
09
#10
b010 #
1%
0&
0(
1)
b110001010 +
1-
14
b101 7
#15
b011 #
1&
0)
b0100 *
b100000110 +
1.
0/
03
15
06
b100 7
#20
b100 #
1$
0%
0&
0'
1(
1)
b0010 *
b101100000 +
0-
0.
11
12
05
16
b011 7
#25
b101 #
1&
0)
b0100 *
b100111000 +
1/
10
02
15
06
b010 7
#30
b110 #
1%
0&
0(
1)
b100011001 +
1,
01
b001 7
#35
b111 #
1&
0)
b1000 *
b100000001 +
0/
00
05
b000 7
18
#40
